import app.keyboards as kb
import app.database.requests as rq

from aiogram import F, Router

from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()

class Reg(StatesGroup):
    name = State()
    number = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.reply('–°–µ—Ä–≤–∏—Å —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=kb.main_kz)


@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/get_photo\n/get_user_id')


@router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
async def how_are_you(message: Message):
    await message.answer('OK!')


@router.message(F.photo)
async def get_photo_id(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')


@router.message(Command('get_photo'))
async def get_photo(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAMHZm69hGz90LsvZ2piSUDJJtwztC0AAobdMRvKrXhLmdrEZfhwy_UBAAMCAAN4AAM1BA', caption='–≠—Ç–æ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ê–∫–∂–æ–ª–∞')


@router.message(Command('get_user_id'))
async def get_user_id(message: Message):
    await message.answer(f'–í–∞—à–µ ID: {message.from_user.id}')
    
    
@router.message(F.text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Äüìù')
async def calculator_kz(message: Message):
    await message.answer('–°—ñ–∑ –Ω–µ–Ω—ñ –µ—Å–µ–ø—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?', reply_markup=kb.calculator_kz)
    
    
@router.message(F.text == 'üìè –û—Ä—Ç–∞—à–∞ –±–∞“ì–∞')
async def avg_kz(message: Message):
    await message.answer('–°—ñ–∑ –Ω–µ–Ω—ñ –µ—Å–µ–ø—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?', reply_markup=kb.avg_kz)
    
    
@router.message(F.text == 'üìå –†–µ–π—Ç–∏–Ω–≥')
async def rating_kz(message: Message):
    await message.answer('–°—ñ–∑–¥—ñ“£ –∞–ø—Ç–∞–ª—ã“õ –±–∞“ì–∞“£—ã–∑–¥—ã“£ –æ—Ä—Ç–∞—à–∞ –±–∞–ª–ª—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–ï–≥–µ—Ä –±–∞“ì–∞“£—ã–∑ —Ç–æ–ª—ã“õ –±–æ–ª–º–∞—Å–∞, –Ω“Ø–∫—Ç–µ “õ–æ—é –∞—Ä“õ—ã–ª—ã –∂–∞–∑—ã“£—ã–∑. –ú—ã—Å–∞–ª—ã: 85.33)', reply_markup=kb.back_kz)
    
    
@router.message(F.text == 'üá∞üáø –¢—ñ–ª üá∑üá∫')
async def choose_language(message: Message):
    await message.answer('–¢—ñ–ª —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=kb.language)
    

@router.message(F.text == 'KZ')
async def kazakh(message: Message):
    await message.answer('–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑', reply_markup=kb.main_kz)
    
    
@router.message(F.text == 'RU')
async def russian(message: Message):
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', reply_markup=kb.main_ru)
    
    
@router.message(F.text == '–ü—Ä–∞–∫/C–†–û üìù')
async def prac_sro_kz(message: Message):
    await message.answer('–ë–∞—Ä–ª—ã“õ –ü–†–ê–ö–¢–ò–ö–ê –±–∞“ì–∞–ª–∞—Ä—ã–Ω –±–æ—Å –æ—Ä—ã–Ω –∞—Ä“õ—ã–ª—ã –Ω–µ–º–µ—Å–µ “Ø—Ç—ñ—Ä –∞—Ä“õ—ã–ª—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–Ω.–ø. –µ–Ω–≥—ñ–∑–±–µ“£—ñ–∑!, –Ω.—è.= 0 —Ä–µ—Ç—ñ–Ω–¥–µ —Å–∞–Ω–∞–ª–∞–¥—ã)', reply_markup=kb.back_kz)
    
    
@router.message(F.text == '‚óÄÔ∏è –ê—Ä—Ç“õ–∞ ‚óÄÔ∏è')
async def back_kz(message: Message):
    await message.answer('–°–µ—Ä–≤–∏—Å —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=kb.main_kz)   


@router.message(F.text == '‚óÄÔ∏è –ú–µ–Ω—é ‚óÄÔ∏è')
async def menu_kz(message: Message):
    await message.answer('–°–µ—Ä–≤–∏—Å —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=kb.main_kz)       
    
    
@router.message(F.text == '‚ùì –ö”©–º–µ–∫ ‚ùì')
async def help_kz(message: Message):
    await message.answer('–ö”©–º–µ–∫ “õ–∞–∂–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=kb.help_kz)
    
    
@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)
    

@router.message(Reg.number, F.contact)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.contact.first_name)
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['number']}')
    await state.clear()
       
    